#+TITLE: TODO Title

# class declared in readme.org
#+LaTeX_CLASS: cluster-engine-doc

#+INCLUDE: "setup/extract-lisp-documentation.setup"

* API

Extracting docs again :)

#+call: defun(name='cluster-engine:rules->cluster)

#+call: defun(name='cluster-engine:clusterengine)

#+call: defun(name='cluster-engine:r-rhythms-one-voice)


Here goes on the general text. Here goes on the general text. Here
goes on the general text. Here goes on the general text.


* TODO COMMENT Revise Automatic Common Lisp Doc Extraction

  - Get support for Latex and PDF output: create publishing project for exporting all Org files into a single Latex file. 
    Approach: create a top-level file in an extra dir with all the necessary settings, that includes these exported files.
    Minor problem: default Latex class does not do line breaks for long lambda lists in the automatically generated API docs, but there will be a way around that


** DONE Old
   CLOSED: [2017-09-18 Mon 02:17]

    - Add index support (e.g., directly with Sphinx syntax)

   - My current Org mode macro =defun= does not yet support multi-line doc strings, quite possibly because I removed the surrounding strings...
     -> Using Lisp code blocks instead of Orgmode macros seems to be a way around

   - The macro =defun= HTML export is not clean, e.g., the index extry to generate is actually shown
     -> Problem solved with export to rST
(let ((fn-name (docparser::get-name name docparser::doc-index))
      (lambda-list (format nil "~{~A~^ ~}"
			   (docparser::get-lambda-list name docparser::doc-index)))
      ;; Docstring, with paragraphs indented
      (docstring (replace-all (docparser::get-docstring name docparser::doc-index) "
  " "
      ")))
  (format T "#+BEGIN_EXPORT rst
  .. index::
     single: ~A (function)
#+END_EXPORT

  - /function/ (*~A* ~A) :: ~A"
	  fn-name fn-name lambda-list docstring))
