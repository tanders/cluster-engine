# -*- mode: org -*-

* Test Functions - can be removed                                  :noexport:

#+name: my-new-fn
#+begin_src elisp :var x=7
(+ x x)
#+end_src


#+name: gen_doc
#+begin_src lisp :results output raw :exports results :var data='("This" "is" "a" "test")
(format t "~{~A~%~}" data)
#+end_src


* Lisp doc functions                                               :noexport:

Note: default value of name arg must be in docparser::doc-index, otherwise I get an error.

#+name: defun
#+begin_src lisp :results output raw :exports results :var name='cluster-engine:rules->cluster
  ;; Create org-mode description list
  ;; - /function/ (*<name>* <lambda-list>) :: <doc-string>
  ;;
  ;; Using format and :results output necessary to remove the double-quotes from the string result
  ;; (format T "~{~A~}"
  ;; 	(list
  ;; 	 "  - /function/ (*"
  ;; 	 (docparser::get-name name docparser::doc-index)
  ;; 	 "* "
  ;; 	 (format nil "~{~A~^ ~}" (docparser::get-lambda-list name docparser::doc-index))
  ;; 	 ") :: "
  ;; 	 ;; Docstring paragraphs indented
  ;; 	 (replace-all (docparser::get-docstring name docparser::doc-index) "
  ;; " "
  ;;     ")
  ;; 	))

  (let ((fn-name (docparser::get-name name docparser::doc-index))
	(lambda-list (format nil "~{~A~^ ~}"
			     (docparser::get-lambda-list name docparser::doc-index)))
	;; Docstring, with paragraphs indented
	(docstring (replace-all (docparser::get-docstring name docparser::doc-index) "
    " "
	")))
    (format T "#+BEGIN_EXPORT rst
    .. index::
       single: ~A (function)
  ,#+END_EXPORT

    - /function/ (*~A* ~A) :: ~A"
	    fn-name fn-name lambda-list docstring))
#+end_src
