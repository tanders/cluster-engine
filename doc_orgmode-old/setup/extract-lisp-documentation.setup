# -*- mode: org; -*-


#+begin_src lisp :exports none
(require :cluster-engine)
; (in-package :fenv)

(require :docparser)

;; (defparameter docparser::om-doc-index (docparser:parse :om))
(defparameter docparser::doc-index (docparser:parse :cluster-engine))


(defun docparser::get-name (symbol-name index)
  (let ((doc-entry (elt (docparser:query index :symbol-name symbol-name)
			0)))
    (docparser:node-name doc-entry)))

; (docparser::get-name 'fenv:v docparser::fenv-doc-index)

(defun docparser::get-docstring (symbol-name index)
  (let ((doc-entry (elt (docparser:query index :symbol-name symbol-name)
			0)))
    (docparser:node-docstring doc-entry)))

; (docparser::get-docstring 'v docparser::fenv-doc-index)

(defun docparser::get-lambda-list (symbol-name index)
  (let ((doc-entry (elt (docparser:query index :symbol-name symbol-name)
			0)))
    (docparser:operator-lambda-list doc-entry)))

; (docparser::get-lambda-list 'v docparser::fenv-doc-index)

; (docparser::get-lambda-list 'om:ambitus docparser::om-doc-index)

 #+end_src

 # TODO:
 # - OK? include function args
 # - OK? add support for index: http://orgmode.org/org.html#Generating-an-index
 # - decide suitable output format and template etc.
 # - put into extra file and use with Cluster Engine
 # - make workable for variables, classes etc.
 # - improve layout of result -- should each function etc. be turned into its own section or some sort of headline?
 # - ensure macro defs are not included
 # - OK? clean up: put src_lisp blocks into separate named code blocks that are then called
 # - ?? consider to include package -- showing that every time is annoying...
 # - NO: try to have package defined globally to reduce clutter

 # https://stackoverflow.com/questions/22132603/define-org-mode-macro-with-line-breaks
 #+MACRO: newline   @@html:@@ src_emacs-lisp[:results raw]{"\n"}
 #+MACRO: index-marker   @@html:@@ src_emacs-lisp[:results raw]{"#+INDEX:"}
 #+MACRO: get-name   src_lisp[:results output raw]{(format t "~A" (docparser::get-name '$1 docparser::doc-index))}
 #+MACRO: get-docstring   src_lisp[:results output raw]{(format t "~A" (docparser::get-docstring '$1 docparser::doc-index))}
 #+MACRO: get-lambda-list   src_lisp[:results output raw]{(format t "~{~A~^ ~}" (docparser::get-lambda-list '$1 docparser::doc-index))}
 # Macro args: function-name, function-package 
 #+MACRO: defun     [function] *{{{get-name($1)}}}* {{{get-lambda-list($1)}}} {{{newline}}}{{{index-marker}}} $1{{{newline}}}{{{newline}}}{{{get-docstring($1)}}}{{{newline}}}

